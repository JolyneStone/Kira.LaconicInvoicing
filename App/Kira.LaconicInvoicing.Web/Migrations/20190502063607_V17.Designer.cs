// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OSharp.Entity;

namespace Kira.LaconicInvoicing.Web.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    [Migration("20190502063607_V17")]
    partial class V17
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Kira.LaconicInvoicing.Common.Entities.BaseData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("BaseData");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.LoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Ip");

                    b.Property<DateTime?>("LogoutTime");

                    b.Property<string>("UserAgent");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLog");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedName")
                        .IsRequired();

                    b.Property<string>("Remark")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "97313840-7874-47e5-81f2-565613c8cdcc",
                            CreatedTime = new DateTime(2019, 5, 2, 14, 36, 6, 336, DateTimeKind.Local).AddTicks(9262),
                            IsAdmin = true,
                            IsDefault = false,
                            IsLocked = false,
                            IsSystem = true,
                            Name = "系统管理员",
                            NormalizedName = "系统管理员",
                            Remark = "系统最高权限管理角色"
                        });
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("HeadImg");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsSystem");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NickName");

                    b.Property<string>("NormalizeEmail")
                        .IsRequired();

                    b.Property<string>("NormalizedUserName")
                        .IsRequired();

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Remark");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NormalizeEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .IsRequired();

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Profile")
                        .HasColumnType("TEXT")
                        .HasMaxLength(3000);

                    b.Property<string>("RegisterIp");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("LoginProvider", "ProviderKey")
                        .IsUnique()
                        .HasName("UserLoginIndex");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsLocked");

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasName("UserRoleIndex");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "LoginProvider", "Name")
                        .IsUnique()
                        .HasName("UserTokenIndex");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Notification.Entities.Notice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime?>("DateTime");

                    b.HasKey("Id");

                    b.ToTable("Notice");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Notification.Entities.NoticeReceiving", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRead");

                    b.Property<Guid>("NoticeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("NoticeReceiving");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Purchase.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<double>("Price");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Purchase.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountPaid");

                    b.Property<string>("Comment");

                    b.Property<string>("Consignee")
                        .HasMaxLength(255);

                    b.Property<string>("ConsigneeContact")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Consignor")
                        .HasMaxLength(255);

                    b.Property<string>("ConsignorContact")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("DestAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double?>("Freight");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<string>("PayWay");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Status");

                    b.Property<double>("TotalAmount");

                    b.Property<int>("TotalQuantity");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("VendorNumber")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("WarehouseNumber")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Purchase.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Brand")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<double>("Price");

                    b.Property<Guid>("PurchaseOrderId");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderItem");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Purchase.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateTime");

                    b.Property<double>("Debt");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Purchase.Entities.VendorMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MaterialId");

                    b.Property<Guid>("VendorId");

                    b.HasKey("Id");

                    b.ToTable("VendorMaterial");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Sale.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateTime");

                    b.Property<double>("Debt");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Sale.Entities.CustomerProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("Id");

                    b.ToTable("CustomerProduct");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Sale.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<double>("CostPrice");

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<double>("RetailPrice");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double>("WholesalePrice");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Sale.Entities.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountPaid");

                    b.Property<string>("Comment");

                    b.Property<string>("Consignee")
                        .HasMaxLength(255);

                    b.Property<string>("ConsigneeContact")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Consignor")
                        .HasMaxLength(255);

                    b.Property<string>("ConsignorContact")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("CustomerNumber")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("DestAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double?>("Freight");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<string>("PayWay");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Status");

                    b.Property<double>("TotalAmount");

                    b.Property<int>("TotalQuantity");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("WarehouseNumber")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("SaleOrder");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Sale.Entities.SaleOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Brand")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<double>("Price");

                    b.Property<Guid>("SaleOrderId");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SaleOrderItem");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.EntityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<Guid>("EntityId");

                    b.Property<string>("FilterGroupJson");

                    b.Property<bool>("IsLocked");

                    b.Property<int>("Operation");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("EntityId", "RoleId", "Operation")
                        .IsUnique()
                        .HasName("EntityRoleIndex");

                    b.ToTable("EntityRole");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.EntityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<Guid>("EntityId");

                    b.Property<string>("FilterGroupJson");

                    b.Property<bool>("IsLocked");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("EntityId", "UserId")
                        .HasName("EntityUserIndex");

                    b.ToTable("EntityUser");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("OrderCode");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Remark");

                    b.Property<string>("TreePathString");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Module");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Root",
                            Name = "根节点",
                            OrderCode = 1.0,
                            Remark = "系统根节点",
                            TreePathString = "$1$"
                        });
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.ModuleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FunctionId");

                    b.Property<int>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("ModuleId", "FunctionId")
                        .IsUnique()
                        .HasName("ModuleFunctionIndex");

                    b.ToTable("ModuleFunction");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.ModuleRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModuleId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ModuleId", "RoleId")
                        .IsUnique()
                        .HasName("ModuleRoleIndex");

                    b.ToTable("ModuleRole");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.ModuleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Disabled");

                    b.Property<int>("ModuleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ModuleId", "UserId")
                        .IsUnique()
                        .HasName("ModuleUserIndex");

                    b.ToTable("ModuleUser");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Systems.Entities.AuditEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EntityKey");

                    b.Property<string>("Name");

                    b.Property<int>("OperateType");

                    b.Property<Guid>("OperationId");

                    b.Property<string>("TypeName");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("AuditEntity");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Systems.Entities.AuditOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Browser");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<int>("Elapsed");

                    b.Property<string>("FunctionName");

                    b.Property<string>("Ip");

                    b.Property<string>("Message");

                    b.Property<string>("NickName");

                    b.Property<string>("OperationSystem");

                    b.Property<int>("ResultType");

                    b.Property<string>("UserAgent");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("AuditOperation");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Systems.Entities.AuditProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuditEntityId");

                    b.Property<string>("DataType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("FieldName");

                    b.Property<string>("NewValue");

                    b.Property<string>("OriginalValue");

                    b.HasKey("Id");

                    b.HasIndex("AuditEntityId");

                    b.ToTable("AuditProperty");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Warehouse.Entities.InboundReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("Consignee")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ConsigneeContact")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("DeliveryMan")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DeliveryManContact")
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SupplierNo")
                        .HasMaxLength(255);

                    b.Property<string>("SupplyAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("WarehouseNumber")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("WaybillNo")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("InboundReceipt");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Warehouse.Entities.InboundReceiptItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Brand")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<int>("GoodsCategory");

                    b.Property<Guid>("InboundReceiptId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<double>("Price");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("InboundReceiptItem");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Warehouse.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<DateTime?>("DateTime");

                    b.Property<int>("GoodsCategory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<Guid>("WarehouseId");

                    b.HasKey("Id");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Warehouse.Entities.OutboundReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("Consignor")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ConsignorContact")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("DeliveryMan")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DeliveryManContact")
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ReceiverNo")
                        .HasMaxLength(255);

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("WarehouseNumber")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("WaybillNo")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("OutboundReceipt");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Warehouse.Entities.OutboundReceiptItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Brand")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<int>("GoodsCategory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<Guid>("OutboundReceiptId");

                    b.Property<double>("Price");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("OutboundReceiptItem");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Warehouse.Entities.TransferOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("Consignee")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ConsigneeContact")
                        .HasMaxLength(255);

                    b.Property<string>("Consignor")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ConsignorContact")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("DeliveryMan")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DeliveryManContact")
                        .HasMaxLength(255);

                    b.Property<string>("DestAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DestWarehouseName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DestWarehouseNumber")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SourceWarehouseName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SourceWarehouseNumber")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("WaybillNo")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("TransferOrder");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Warehouse.Entities.TransferOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Brand")
                        .HasMaxLength(255);

                    b.Property<string>("Comment");

                    b.Property<int>("GoodsCategory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<double>("Price");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid>("TransferOrderId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("TransferOrderItem");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Warehouse.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ManagerContact")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("OSharp.Core.EntityInfos.EntityInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AuditEnabled");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PropertyJson")
                        .IsRequired();

                    b.Property<string>("TypeName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique()
                        .HasName("ClassFullNameIndex");

                    b.ToTable("EntityInfo");
                });

            modelBuilder.Entity("OSharp.Core.Functions.Function", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessType");

                    b.Property<string>("Action");

                    b.Property<string>("Area");

                    b.Property<bool>("AuditEntityEnabled");

                    b.Property<bool>("AuditOperationEnabled");

                    b.Property<int>("CacheExpirationSeconds");

                    b.Property<string>("Controller");

                    b.Property<bool>("IsAccessTypeChanged");

                    b.Property<bool>("IsAjax");

                    b.Property<bool>("IsCacheSliding");

                    b.Property<bool>("IsController");

                    b.Property<bool>("IsLocked");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Area", "Controller", "Action")
                        .IsUnique()
                        .HasName("AreaControllerActionIndex");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("OSharp.Core.Systems.KeyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsLocked");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<string>("ValueJson");

                    b.Property<string>("ValueType");

                    b.HasKey("Id");

                    b.ToTable("KeyValue");

                    b.HasData(
                        new
                        {
                            Id = new Guid("534d7813-0eea-44cc-b88e-a9cb010c6981"),
                            IsLocked = false,
                            Key = "Site.Name",
                            ValueJson = "\"OSHARP\"",
                            ValueType = "System.String,System.Private.CoreLib"
                        },
                        new
                        {
                            Id = new Guid("977e4bba-97b2-4759-a768-a9cb010c698c"),
                            IsLocked = false,
                            Key = "Site.Description",
                            ValueJson = "\"Osharp with .NetStandard2.0 & Angular6\"",
                            ValueType = "System.String,System.Private.CoreLib"
                        });
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.LoginLog", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.Organization", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.Organization")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.RoleClaim", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserClaim", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserDetail", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("Kira.LaconicInvoicing.Identity.Entities.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserLogin", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserRole", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Identity.Entities.UserToken", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.EntityRole", b =>
                {
                    b.HasOne("OSharp.Core.EntityInfos.EntityInfo", "EntityInfo")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.EntityUser", b =>
                {
                    b.HasOne("OSharp.Core.EntityInfos.EntityInfo", "EntityInfo")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.Module", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Security.Entities.Module", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.ModuleFunction", b =>
                {
                    b.HasOne("OSharp.Core.Functions.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kira.LaconicInvoicing.Security.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.ModuleRole", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Security.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Security.Entities.ModuleUser", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Security.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kira.LaconicInvoicing.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Systems.Entities.AuditEntity", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Systems.Entities.AuditOperation", "Operation")
                        .WithMany("AuditEntities")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kira.LaconicInvoicing.Systems.Entities.AuditProperty", b =>
                {
                    b.HasOne("Kira.LaconicInvoicing.Systems.Entities.AuditEntity", "AuditEntity")
                        .WithMany("Properties")
                        .HasForeignKey("AuditEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
