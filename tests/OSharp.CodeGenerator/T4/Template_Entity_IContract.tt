<#+
// <copyright file="Template_Entity_IContract.tt" company="Microsoft">
//  Copyright © Microsoft. All Rights Reserved.
// </copyright>

public class IEntityContractTemplate : CSharpTemplate
{
        private IGrouping<string, TypeMetadata> _group;
        private string _moduleName;

        public IEntityContractTemplate(IGrouping<string, TypeMetadata> group)
        {
            _group = group;
            _moduleName = group.Key;
        }
       
        public string FileName
        {
            get
            {
                return string.IsNullOrEmpty(_moduleName)
                    ? string.Format("I{0}Contract.txt", _moduleName)
                    : string.Format("{0}\\I{0}Contract.txt", _moduleName);
            }
        }

        public string ProjectName { get; set; }

	    public override string TransformText()
	    {
		    base.TransformText();
#>
// -----------------------------------------------------------------------
//  <copyright file="I<#=_moduleName #>Contract.cs" company="OSharp开源团队">
//      Copyright (c) 2014-<#=DateTime.Now.Year #> OSharp. All rights reserved.
//  </copyright>
//  <site>http://www.osharp.org</site>
//  <last-editor>郭明锋</last-editor>
//  <last-date><#=DateTime.Now.ToString("yyyy-MM-dd HH:mm") #></last-date>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>.Dtos;
using <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>.Entities;

using OSharp.Data;


namespace <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>
{
    /// <summary>
    /// 业务契约：<#=_moduleName #>模块
    /// </summary>
    public interface I<#=_moduleName #>Contract
    {
<#+ 
            foreach (TypeMetadata entity in _group)                
            {
                var key = entity.PropertyMetadatas.First(m => m.Name == "Id");
#>
        #region <#=entity.Display #>信息业务

        /// <summary>
        /// 获取 <#=entity.Display #>信息查询数据集
        /// </summary>
        IQueryable<<#=entity.Name #>> <#=entity.Name.ToPlural() #> { get; }

        /// <summary>
        /// 检查<#=entity.Display #>信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的<#=entity.Display #>信息编号</param>
        /// <returns><#=entity.Display #>信息是否存在</returns>
        Task<bool> Check<#=entity.Name #>Exists(Expression<Func<<#=entity.Name #>, bool>> predicate, <#=GetSingleTypeName(key) #> id = 0);

        /// <summary>
        /// 添加<#=entity.Display #>信息信息
        /// </summary>
        /// <param name="dtos">要添加的<#=entity.Display #>信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> Create<#=entity.Name.ToPlural() #>(params <#=entity.Name #>InputDto[] dtos);

        /// <summary>
        /// 更新<#=entity.Display #>信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的<#=entity.Display #>信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> Update<#=entity.Name.ToPlural() #>(params <#=entity.Name #>InputDto[] dtos);

        /// <summary>
        /// 删除<#=entity.Display #>信息信息
        /// </summary>
        /// <param name="ids">要删除的<#=entity.Display #>信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> Delete<#=entity.Name.ToPlural() #>(params <#=GetSingleTypeName(key) #>[] ids);

        #endregion

<#+ 
            }
#>
    }
}

<#+
            return this.GenerationEnvironment.ToString();
	    }

        
        private static string GetSingleTypeName(PropertyMetadata prop)
        {
            string name = prop.TypeName;
            switch(prop.TypeName)
            {
                case "System.Int32":
                    name = "int";
                    break;
                case "System.Long":
                    name = "long";
                    break;
                case "System.Decimal":
                    name = "decimal";
                    break;
                case "System.String":
                    name = "string";                    
                    break;
                case "System.Guid":
                    name = "Guid";
                    break;
                case "System.Boolean":
                    name = "bool";
                    break;
                case "System.DateTime":
                    name = "DateTime";
                    break;
            }
            if(prop.IsNullable)
            {
                name = name + "?";
            }
            return name;
        }
}
#>
