<#+
// <copyright file="Template_Entity_Configuration.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class EntityServiceEntityTemplate : CSharpTemplate
{
        private readonly TypeMetadata _entity;
        private readonly string _entityName;
        private readonly string _lowerEntityName;
        private readonly string _moduleName = null;
        private readonly PropertyMetadata _key;

        public EntityServiceEntityTemplate(TypeMetadata entity, string modulePattern)
        {
            _entityName = entity.Name;
            _lowerEntityName = entity.Name.UpperToLowerAndSplit();
            _entity = entity;
            _key = entity.PropertyMetadatas.First(m => m.Name == "Id");
            if(modulePattern != null)
            {
                _moduleName = entity.Namespace.Match(modulePattern);
                switch(entity.FullName)
                {
                    case "OSharp.Core.Functions.Function":
                    case "OSharp.Core.EntityInfos.EntityInfo":
                        _moduleName = "Security";
                        break;
                    case "OSharp.Core.Systems.KeyValue":
                        _moduleName = "Systems";
                        break;
                }
            }
        }

        public string FileName
        {
            get
            {
                return string.IsNullOrEmpty(_moduleName)
                    ? string.Format("{0}Service.{1}.txt", _moduleName, _entityName)
                    : string.Format("{0}\\{0}Service.{1}.txt", _moduleName, _entityName);
            }
        }

        public string ProjectName { get; set; }

	    public override string TransformText()
	    {
		    base.TransformText();
#>
// -----------------------------------------------------------------------
//  <copyright file="<#=_moduleName #>Service.<#=_entityName #>.cs" company="OSharp开源团队">
//      Copyright (c) 2014-<#=DateTime.Now.Year #> OSharp. All rights reserved.
//  </copyright>
//  <site>http://www.osharp.org</site>
//  <last-editor>郭明锋</last-editor>
//  <last-date><#=DateTime.Now.ToString("yyyy-MM-dd HH:mm") #></last-date>
// -----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>.Dtos;
using <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>.Entities;

using OSharp.Data;
using OSharp.Extensions;


namespace <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>
{
    /// <summary>
    /// 服务实现：<#=_entity.Display #>
    /// </summary>
    public partial class <#=_moduleName #>Service
    {
        /// <summary>
        /// 获取 <#=_entity.Display #>信息查询数据集
        /// </summary>
        public IQueryable<<#=_entityName #>> <#=_entity.Name.ToPlural() #>
        {
            get { return <#=_entityName #>Repository.Query(); }
        }

        /// <summary>
        /// 检查<#=_entity.Display #>信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的<#=_entity.Display #>信息编号</param>
        /// <returns><#=_entity.Display #>信息是否存在</returns>
        public Task<bool> Check<#=_entityName #>Exists(Expression<Func<<#=_entityName #>, bool>> predicate, int id = 0)
        {
            return <#=_entityName #>Repository.CheckExistsAsync(predicate, id);
        }

        /// <summary>
        /// 添加<#=_entity.Display #>信息
        /// </summary>
        /// <param name="dtos">要添加的<#=_entity.Display #>信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        public Task<OperationResult> Create<#=_entity.Name.ToPlural() #>(params <#=_entityName #>InputDto[] dtos)
        {
            Check.NotNull(dtos, nameof(dtos));
            return <#=_entityName #>Repository.InsertAsync(dtos);
        }

        /// <summary>
        /// 更新<#=_entity.Display #>信息
        /// </summary>
        /// <param name="dtos">包含更新信息的<#=_entity.Display #>信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        public Task<OperationResult> Update<#=_entity.Name.ToPlural() #>(params <#=_entityName #>InputDto[] dtos)
        {
            Check.NotNull(dtos, nameof(dtos));
            return <#=_entityName #>Repository.UpdateAsync(dtos);
        }

        /// <summary>
        /// 删除<#=_entity.Display #>信息
        /// </summary>
        /// <param name="ids">要删除的<#=_entity.Display #>信息编号</param>
        /// <returns>业务操作结果</returns>
        public Task<OperationResult> Delete<#=_entity.Name.ToPlural() #>(params <#=GetSingleTypeName(_key) #>[] ids)
        {
            Check.NotNull(ids, nameof(ids));
            return <#=_entityName #>Repository.DeleteAsync(ids);
        }
    }
}
<#+
            return this.GenerationEnvironment.ToString();
	    }

        
        private static string GetSingleTypeName(PropertyMetadata prop)
        {
            string name = prop.TypeName;
            switch(prop.TypeName)
            {
                case "System.Int32":
                    name = "int";
                    break;
                case "System.Long":
                    name = "long";
                    break;
                case "System.Decimal":
                    name = "decimal";
                    break;
                case "System.String":
                    name = "string";                    
                    break;
                case "System.Guid":
                    name = "Guid";
                    break;
                case "System.Boolean":
                    name = "bool";
                    break;
                case "System.DateTime":
                    name = "DateTime";
                    break;
            }
            if(prop.IsNullable)
            {
                name = name + "?";
            }
            return name;
        }
}
#>
