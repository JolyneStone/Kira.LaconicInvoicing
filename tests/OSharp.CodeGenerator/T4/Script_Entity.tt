<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Template_Entity_Configuration.tt" #>
<#@ include file="Template_Entity_InputDto.tt" #>
<#@ include file="Template_Entity_OutputDto.tt" #>
<#@ include file="Template_Entity_IContract.tt" #>
<#@ include file="Template_Entity_Service.tt" #>
<#@ include file="Template_Entity_Service_Entity.tt" #>
<#@ include file="Template_Entity_AdminController.tt" #>

<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Runtime.dll" #>
<#@ assembly name="System.Net.Http.dll" #>
<#@ assembly name="$(TargetDir)netstandard.dll" #>
<#@ assembly name="$(TargetDir)Newtonsoft.Json.dll" #>
<#@ assembly name="$(TargetDir)OSharp.dll" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ Import Namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Net.Http" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="OSharp.CodeGenerator" #>
<#@ import namespace="OSharp.Extensions" #>
<#@ import namespace="OSharp.Json" #>
<#
    string currentPath = Path.GetDirectoryName(Host.TemplateFile);
    string configPath = currentPath + "\\cs_config";
    string dtoPath = currentPath + "\\cs_dtos";
    string servicePath = currentPath + "\\cs_service";
    string admincontrollerPath = currentPath + "\\cs_admincontroller";
    string projectName = "Liuliu.Demo";

    bool generateConfig = true;
    bool generateInputDto = true;
    bool generateOutputDto = true;
    bool generateService = true;
    bool generateAdminController = true;

    HttpClient client = new HttpClient();
    string url = "http://localhost:7001/api/Common/GetTypeMetadatas?type=entity";
    string json = client.GetStringAsync(url).Result;
    TypeMetadata[] entities = json.FromJsonString<TypeMetadata[]>();
    string modulePattern=@"(?<=Demo\.)\w+(?=\.*Entities)";

    // EntityConfiguration
    if(generateConfig)
    {
        foreach(var entity in entities)
        {
            EntityConfigurationTemplate template = new EntityConfigurationTemplate(entity, modulePattern);
            template.ProjectName = projectName;
            string fileName = Path.Combine(configPath, template.FileName);
            template.Output.Encoding = Encoding.UTF8;
            template.RenderToFile(fileName);
        } 
    }

    //InputDto
    if(generateInputDto) 
    {
        foreach(var entity in entities)
        {
            InputDtoTemplate template = new InputDtoTemplate(entity, modulePattern);
            template.ProjectName = projectName;
            string fileName = Path.Combine(dtoPath, template.FileName);
            template.Output.Encoding = Encoding.UTF8;
            template.RenderToFile(fileName);
        }
    }

    //OutputDto
    if(generateOutputDto) 
    {
        foreach(var entity in entities)
        {
            OutputDtoTemplate template = new OutputDtoTemplate(entity, modulePattern);
            template.ProjectName = projectName;
            string fileName = Path.Combine(dtoPath, template.FileName);
            template.Output.Encoding = Encoding.UTF8;
            template.RenderToFile(fileName);
        }
    }

    //Service
    if(generateService)
    {
        //各模块契约层
        IGrouping<string, TypeMetadata>[] groups = entities.GroupBy(m =>
        {
            switch (m.FullName)
            {
                case "OSharp.Core.Systems.KeyValue":
                    return "Systems";
                case "OSharp.Core.Functions.Function":
                case "OSharp.Core.EntityInfos.EntityInfo":
                    return "Security";
                default:
                    return m.FullName.Match(modulePattern);
            }
        }).ToArray();
        //接口文件
        foreach(var group in groups)
        {
            IEntityContractTemplate template = new IEntityContractTemplate(group);
            template.ProjectName = projectName;
            string fileName = Path.Combine(servicePath, template.FileName);
            template.Output.Encoding = Encoding.UTF8;
            template.RenderToFile(fileName);
        }
        //主服务文件
        foreach(var group in groups)
        {
            EntityServiceTemplate template = new EntityServiceTemplate(group);
            template.ProjectName = projectName;
            string fileName = Path.Combine(servicePath, template.FileName);
            template.Output.Encoding = Encoding.UTF8;
            template.RenderToFile(fileName);
        }

        //各实体服务层
        foreach(var entity in entities)
        {
            EntityServiceEntityTemplate template = new EntityServiceEntityTemplate(entity, modulePattern);
            template.ProjectName = projectName;
            string fileName = Path.Combine(servicePath, template.FileName);
            template.Output.Encoding = Encoding.UTF8;
            template.RenderToFile(fileName);
        }
    }

    //AdminController
    if(generateAdminController)
    {
        foreach(var entity in entities)
        {
            AdminControllerTemplate template = new AdminControllerTemplate(entity, modulePattern);
            template.ProjectName = projectName;
            string fileName = Path.Combine(admincontrollerPath, template.FileName);
            template.Output.Encoding = Encoding.UTF8;
            template.RenderToFile(fileName);
        }
    }
#>