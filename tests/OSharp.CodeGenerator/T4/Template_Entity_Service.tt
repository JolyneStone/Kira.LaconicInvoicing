<#+
// <copyright file="Template_Entity_IContract.tt" company="Microsoft">
//  Copyright © Microsoft. All Rights Reserved.
// </copyright>

public class EntityServiceTemplate : CSharpTemplate
{
        private IGrouping<string, TypeMetadata> _group;
        private string _moduleName;

        public EntityServiceTemplate(IGrouping<string, TypeMetadata> group)
        {
            _group = group;
            _moduleName = group.Key;
        }
       
        public string FileName
        {
            get
            {
                return string.IsNullOrEmpty(_moduleName)
                    ? string.Format("{0}Service.txt", _moduleName)
                    : string.Format("{0}\\{0}Service.txt", _moduleName);
            }
        }

        public string ProjectName { get; set; }

	    public override string TransformText()
	    {
		    base.TransformText();
#>
// -----------------------------------------------------------------------
//  <copyright file="<#=_moduleName #>Service.cs" company="OSharp开源团队">
//      Copyright (c) 2014-<#=DateTime.Now.Year #> OSharp. All rights reserved.
//  </copyright>
//  <site>http://www.osharp.org</site>
//  <last-editor>郭明锋</last-editor>
//  <last-date><#=DateTime.Now.ToString("yyyy-MM-dd HH:mm") #></last-date>
// -----------------------------------------------------------------------

using System;

using <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>.Entities;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using OSharp.Entity;


namespace <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>
{
    /// <summary>
    /// 业务实现：<#=_moduleName #>模块
    /// </summary>
    public partial class <#=_moduleName #>Service : I<#=_moduleName #>Contract
    {
        private readonly IServiceProvider _provider;
        private readonly ILogger _logger;

        /// <summary>
        /// 初始化一个<see cref="<#=_moduleName #>Service"/>类型的新实例
        /// </summary>
        public <#=_moduleName #>Service(IServiceProvider provider)
        {
            _provider = provider;
            _logger = provider.GetService<ILoggerFactory>().CreateLogger<<#=_moduleName #>Service>();
        }

<#+ 
            foreach (TypeMetadata entity in _group)
            {
                var key = entity.PropertyMetadatas.First(m => m.Name == "Id");
#>
        /// <summary>
        /// 获取 <#=entity.Display #>信息仓储对象
        /// </summary>
        protected IRepository<<#=entity.Name #>, <#=GetSingleTypeName(key) #>> <#=entity.Name #>Repository => _provider.GetService<IRepository<<#=entity.Name #>, <#=GetSingleTypeName(key) #>>>();

<#+ 
            }
#>
    }
}

<#+
            return this.GenerationEnvironment.ToString();
	    }

        
        private static string GetSingleTypeName(PropertyMetadata prop)
        {
            string name = prop.TypeName;
            switch(prop.TypeName)
            {
                case "System.Int32":
                    name = "int";
                    break;
                case "System.Long":
                    name = "long";
                    break;
                case "System.Decimal":
                    name = "decimal";
                    break;
                case "System.String":
                    name = "string";                    
                    break;
                case "System.Guid":
                    name = "Guid";
                    break;
                case "System.Boolean":
                    name = "bool";
                    break;
                case "System.DateTime":
                    name = "DateTime";
                    break;
            }
            if(prop.IsNullable)
            {
                name = name + "?";
            }
            return name;
        }
}
#>
