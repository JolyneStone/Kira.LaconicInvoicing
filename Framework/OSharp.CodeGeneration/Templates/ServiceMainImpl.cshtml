@using System;
@using OSharp.Data
@using OSharp.Extensions;
@using OSharp.CodeGeneration.Schema;
@{
    ModuleMetadata module = Model;
}// -----------------------------------------------------------------------
// <auto-generated>
//     此代码由代码生成器生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//
//  <copyright file="I@(module.Name)Service.generated.cs" company="@module.Project.Company">
//      @module.Project.Copyright
//  </copyright>
//  <site>@module.Project.SiteUrl</site>
//  <last-editor>@module.Project.Creator</last-editor>
//  <last-date>@DateTime.Now.ToString("yyyy/MM/dd HH:mm")</last-date>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Entity;
using OSharp.EventBuses;
using OSharp.Extensions;
using OSharp.Identity;

using @(module.Namespace).Dtos;
using @(module.Namespace).Entities;
using @(module.Namespace).Events;


namespace @(module.Namespace)
{
    /// &lt;summary&gt;
    /// 业务实现：@(module.Display)模块
    /// &lt;/summary&gt;
    public partial class @(module.Name)Service : I@(module.Name)Contract
    {
        private readonly IServiceProvider _provider;
        private readonly ILogger _logger;

        /// &lt;summary&gt;
        /// 初始化一个&lt;see cref="@(module.Name)Service"/&gt;类型的新实例
        /// &lt;/summary&gt;
        public @(module.Name)Service(IServiceProvider provider)
        {
            _provider = provider;
            _logger = provider.GetService&lt;ILoggerFactory&gt;().CreateLogger&lt;@(module.Name)Service&gt;();
        }
    
        #region 属性

@foreach (EntityMetadata entity in module.Entities)
{
    string keyType = TypeHelper.ToSingleTypeName(entity.PrimaryKeyTypeFullName);
        <text>/// &lt;summary&gt;
        /// 获取或设置 @(entity.Display)信息仓储对象
        /// &lt;/summary&gt;
        protected IRepository&lt;@(entity.Name), @(keyType)&gt; @(entity.Name)Repository => _provider.GetService&lt;IRepository&lt;@(entity.Name), @(keyType)&gt;&gt;();
        </text>
}
        /// &lt;summary&gt;
        /// 获取 事件总线
        /// &lt;/summary&gt;
        protected IEventBus EventBus => _provider.GetService&lt;IEventBus&gt;();

        /// &lt;summary&gt;
        /// 获取 设置存储对象
        /// &lt;/summary&gt;
        protected IKeyValueStore KeyValueStore => _provider.GetService&lt;IKeyValueStore&gt;();

        #endregion
    }
}
