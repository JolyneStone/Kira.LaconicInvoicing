@using System;
@using OSharp.CodeGeneration.Schema;
@using OSharp.Extensions
@{
    EntityMetadata entity = Model;
    string keyType = TypeHelper.ToSingleTypeName(entity.PrimaryKeyTypeFullName);
}// -----------------------------------------------------------------------
// <auto-generated>
//     此代码由代码生成器生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//
//  <copyright file="@(entity.Name).generated.cs" company="@entity.Module.Project.Company">
//      @entity.Module.Project.Copyright
//  </copyright>
//  <site>@entity.Module.Project.SiteUrl</site>
//  <last-editor>@entity.Module.Project.Creator</last-editor>
//  <last-date>@DateTime.Now.ToString("yyyy/MM/dd HH:mm")</last-date>
// -----------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using Microsoft.AspNetCore.Mvc;

using OSharp.AspNetCore.Mvc;
using OSharp.AspNetCore.Mvc.Filters;
using OSharp.AspNetCore.UI;
using OSharp.Caching;
using OSharp.Core.Functions;
using OSharp.Core.Modules;
using OSharp.Data;
using OSharp.Filter;
using OSharp.Secutiry;

using @(entity.Module.Namespace);
using @(entity.Module.Namespace).Dtos;
using @(entity.Module.Namespace).Entities;


namespace @(entity.Module.Project.NamespacePrefix).Web.Areas.Admin.Controllers
{
    [ModuleInfo(Position = "@(entity.Module.Name)", PositionName = "@(entity.Module.Display)模块")]
    [Description("管理-@(entity.Display)信息")]
    public partial class @(entity.Name)Controller : AdminApiController
    {
        private readonly I@(entity.Module.Name)Contract _@(entity.Module.Name.LowerFirstChar())Contract;

        /// &lt;summary&gt;
        /// 初始化一个&lt;see cref="@(entity.Name)Controller"/&gt;类型的新实例
        /// &lt;/summary&gt;
        public @(entity.Name)Controller(I@(entity.Module.Name)Contract @(entity.Module.Name.LowerFirstChar())Contract)
        {
            _@(entity.Module.Name.LowerFirstChar())Contract = @(entity.Module.Name.LowerFirstChar())Contract;
        }

        /// &lt;summary&gt;
        /// 读取@(entity.Display)列表信息
        /// &lt;/summary&gt;
        /// &lt;param name="request"&gt;页请求信息&lt;/param&gt;
        /// &lt;returns&gt;@(entity.Display)列表分页信息&lt;/returns&gt;
        [HttpPost]
        [ModuleInfo]
        [Description("读取")]
        public PageData&lt;@(entity.Name)OutputDto&gt; Read(PageRequest request)
        {
            Check.NotNull(request, nameof(request));

            Expression&lt;Func&lt;@(entity.Name), bool&gt;&gt; predicate = _filterService.GetExpression&lt;@(entity.Name)&gt;(request.FilterGroup);
            var page = _roleManager.@(entity.Name.ToPlural()).ToPage&lt;@(entity.Name), @(entity.Name)OutputDto&gt;(predicate, request.PageCondition);

            return page.ToPageData();
        }
    
        /// &lt;summary&gt;
        /// 新增@(entity.Display)信息
        /// &lt;/summary&gt;
        /// &lt;param name="dtos"&gt;@(entity.Display)信息输入DTO&lt;/param&gt;
        /// &lt;returns&gt;JSON操作结果&lt;/returns&gt;
        [HttpPost]
        [ModuleInfo]
        [DependOnFunction("Read")]
        [ServiceFilter(typeof(UnitOfWorkAttribute))]
        [Description("新增")]
        public async Task&lt;AjaxResult&gt; Create(@(entity.Name)InputDto[] dtos)
        {
            Check.NotNull(dtos, nameof(dtos));
            OperationResult result = await _@(entity.Module.Name.LowerFirstChar())Contract.Create@(entity.Name.ToPlural())(dtos);
            return result.ToAjaxResult();
        }

        /// &lt;summary&gt;
        /// 更新@(entity.Display)信息
        /// &lt;/summary&gt;
        /// &lt;param name="dtos"&gt;@(entity.Display)信息输入DTO&lt;/param&gt;
        /// &lt;returns&gt;JSON操作结果&lt;/returns&gt;
        [HttpPost]
        [ModuleInfo]
        [DependOnFunction("Read")]
        [ServiceFilter(typeof(UnitOfWorkAttribute))]
        [Description("更新")]
        public async Task&lt;AjaxResult&gt; Update(@(entity.Name)InputDto[] dtos)
        {
            Check.NotNull(dtos, nameof(dtos));
            OperationResult result = await _@(entity.Module.Name.LowerFirstChar())Contract.Update@(entity.Name.ToPlural())(dtos);
            return result.ToAjaxResult();
        }

        /// &lt;summary&gt;
        /// 删除@(entity.Display)信息
        /// &lt;/summary&gt;
        /// &lt;param name="ids"&gt;@(entity.Display)信息编号&lt;/param&gt;
        /// &lt;returns&gt;JSON操作结果&lt;/returns&gt;
        [HttpPost]
        [ModuleInfo]
        [DependOnFunction("Read")]
        [ServiceFilter(typeof(UnitOfWorkAttribute))]
        [Description("删除")]
        public async Task&lt;AjaxResult&gt; Delete(int[] ids)
        {
            Check.NotNull(ids, nameof(ids));
            OperationResult result = await _@(entity.Module.Name.LowerFirstChar())Contract.Delete@(entity.Name.ToPlural())(ids);
            return result.ToAjaxResult();
        }
    }
}
