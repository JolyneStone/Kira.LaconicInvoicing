@using System;
@using OSharp.Extensions;
@using OSharp.CodeGeneration.Schema;
@{
    EntityMetadata entity = Model;
    string keyType = TypeHelper.ToSingleTypeName(entity.PrimaryKeyTypeFullName);
}// -----------------------------------------------------------------------
// <auto-generated>
//     此代码由代码生成器生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//
//  <copyright file="@(entity.Module.Name)Service.@(entity.Name).generated.cs" company="@entity.Module.Project.Company">
//      @entity.Module.Project.Copyright
//  </copyright>
//  <site>@entity.Module.Project.SiteUrl</site>
//  <last-editor>@entity.Module.Project.Creator</last-editor>
//  <last-date>@DateTime.Now.ToString("yyyy/MM/dd HH:mm")</last-date>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Dependency;
using OSharp.Extensions;
using OSharp.Mapping;

using @(entity.Module.Namespace).Dtos;
using @(entity.Module.Namespace).Entities;
using @(entity.Module.Namespace).Events;


namespace @(entity.Module.Namespace)
{
    public partial class @(entity.Module.Name)Service
    {
        /// &lt;summary&gt;
        /// 获取 @(entity.Display)信息查询数据集
        /// &lt;/summary&gt;
        public IQueryable&lt;@(entity.Name)&gt; @(entity.Name.ToPlural())
        {
            get { return @(entity.Name)Repository.Query(); }
        }

        /// &lt;summary&gt;
        /// 检查@(entity.Display)信息是否存在
        /// &lt;/summary&gt;
        /// &lt;param name="predicate"&gt;检查谓语表达式&lt;/param&gt;
        /// &lt;param name="id"&gt;更新的@(entity.Display)信息编号&lt;/param&gt;
        /// &lt;returns&gt;@(entity.Display)信息是否存在&lt;/returns&gt;
        public virtual Task&lt;bool&gt; Check@(entity.Name)Exists(Expression&lt;Func&lt;@(entity.Name), bool&gt;&gt; predicate, @(keyType) id = default(@(keyType))
        {
            return @(entity.Name)Repository.CheckExistsAsync(predicate, id);
        }

        /// &lt;summary&gt;
        /// 添加@(entity.Display)信息
        /// &lt;/summary&gt;
        /// &lt;param name="dtos"&gt;要添加的@(entity.Display)信息DTO信息&lt;/param&gt;
        /// &lt;returns&gt;业务操作结果&lt;/returns&gt;
        public virtual Task&lt;OperationResult&gt; Create@(entity.Name.ToPlural())(params @(entity.Name)InputDto[] dtos)
        {
            Check.NotNull(dtos, nameof(dtos));
            return @(entity.Name)Repository.InsertAsync(dtos);
        }

        /// &lt;summary&gt;
        /// 更新@(entity.Display)信息
        /// &lt;/summary&gt;
        /// &lt;param name="dtos"&gt;包含更新信息的@(entity.Display)信息DTO信息&lt;/param&gt;
        /// &lt;returns&gt;业务操作结果&lt;/returns&gt;
        public virtual Task&lt;OperationResult&gt; Update@(entity.Name.ToPlural())(params @(entity.Name)InputDto[] dtos)
        {
            Check.NotNull(dtos, nameof(dtos));
            return @(entity.Name)Repository.UpdateAsync(dtos);
        }

        /// &lt;summary&gt;
        /// 删除@(entity.Display)信息
        /// &lt;/summary&gt;
        /// &lt;param name="ids"&gt;要删除的@(entity.Display)信息编号&lt;/param&gt;
        /// &lt;returns&gt;业务操作结果&lt;/returns&gt;
        public virtual Task&lt;OperationResult&gt; Delete@(entity.Name.ToPlural())(params @(keyType)[] ids)
        {
            Check.NotNull(ids, nameof(ids));
            return @(entity.Name)Repository.DeleteAsync(ids);
        }
    }
}
