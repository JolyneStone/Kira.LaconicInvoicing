@using System;
@using OSharp.CodeGeneration.Schema;
@{
    EntityMetadata entity = Model;
    string keyType = TypeHelper.ToSingleTypeName(entity.PrimaryKeyTypeFullName);
}//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由代码生成器生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//
//  <copyright file="@(entity.Name)Configuration.generated.cs" company="@entity.Module.Project.Company">
//      @entity.Module.Project.Copyright
//  </copyright>
//  <site>@entity.Module.Project.SiteUrl</site>
//  <last-editor>@entity.Module.Project.Creator</last-editor>
//  <last-date>@DateTime.Now.ToString("yyyy/MM/dd HH:mm")</last-date>
// -----------------------------------------------------------------------

using System;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

using OSharp.Entity;

using @(entity.Module.Namespace).Entities;


namespace @(entity.Module.Project.NamespacePrefix).EntityConfiguration.@entity.Module.Name
{
    /// &lt;summary&gt;
    /// 实体配置类：@(entity.Display)信息
    /// &lt;/summary&gt;
    public partial class @(entity.Name)Configuration : EntityTypeConfigurationBase&lt;@(entity.Name), @(keyType)&gt;
    {
        /// &lt;summary&gt;
        /// 重写以实现实体类型各个属性的数据库配置
        /// &lt;/summary&gt;
        /// &lt;param name="builder"&gt;实体类型创建器&lt;/param&gt;
        public override void Configure(EntityTypeBuilder&lt;@entity.Name&gt; builder)
        {
            EntityConfigurationAppend(builder);
        }

        /// <summary>
        /// 额外的数据映射
        /// </summary>
        partial void EntityConfigurationAppend(EntityTypeBuilder&lt;@entity.Name&gt; builder);
    }
}
